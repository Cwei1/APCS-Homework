#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <errno.h>

size_t filesize(const char *file){
	struct stat test;
	if (stat(file,&test)<0){
		fprintf(stderr, "Unable to access file information for %s: %s\n",  file, strerror(errno));
		return -1;
	}
	return test.st_size;
}

int filecompare(const char *file_one, const char *file_two){

	char buf[2048]="";
	char buf2[2048]="";
	int fd,fd2,bytesread, bytesread2, index, index2;
	int equal = 0;
	fd = open(file_one, O_RDONLY);
	fd2 = open(file_two, O_RDONLY);
	if (fd<0){
		fprintf(stderr, "Unable to open file %s: %s\n",  file_one, strerror(errno));
		return 0;
	}
	if (fd2<0){
		fprintf(stderr, "Unable to open file %s: %s\n",  file_two, strerror(errno));
		return 0;
	}
	index = 0;
	index2=0;
	if (filesize(file_one) != filesize(file_two)){
		equal=-1;
	}
	else{
	//This is done in case the buffer used is not large enough to hold the file.
		while ((bytesread = read(fd, buf + index, sizeof(buf))) > 0 && (bytesread2 = read(fd2, buf2 + index2, sizeof(buf2))) > 0){
			index=index+bytesread;
			index2=index2+bytesread2;
			int same=memcmp(buf, buf2, sizeof(buf));
			if(same!=0){
				equal=-1;
				printf("%i\n", equal);
			}
		}
	}
	if (equal==0){
		equal = 1;
	}
	int b = close(fd);
	int c = close(fd2);
	if (b<0){
		fprintf(stderr, "Unable to close file %s: %s\n",  file_one, strerror(errno));
	}
	if (c<0){
		fprintf(stderr, "Unable to close file %s: %s\n",  file_two, strerror(errno));
	}
	return equal;
}

void findfile(const char *input, const char *compfile){
	struct stat pathStat;
	struct stat fileStat;
	struct stat pathStat2;
	int z = stat(compfile, &fileStat);
	if (z<0){
		fprintf(stderr, "Unable to access file information for %s: %s\n",  compfile, strerror(errno));
	}
    DIR *dir;
    struct dirent *direc;
    
    if (dir = opendir(input)){
	    while ((direc = readdir(dir)) != NULL) {
	    	if (direc<0){
				fprintf(stderr, "Unable to read directory %s: %s\n",  input, strerror(errno));
			}
	    	char path[1024]="";
	        if (strcmp(direc->d_name, ".") == 0 || strcmp(direc->d_name, "..") == 0){
	            continue;
	        }
	        snprintf(path, sizeof(path), "%s/%s", input, direc->d_name);
	        findfile(path, compfile);
	        int x = lstat(path, &pathStat);
	        if (x<0){
				fprintf(stderr, "Unable to access file information for %s: %s\n",  path, strerror(errno));
			}
	        unsigned short y = pathStat.st_mode;
	        if (S_ISREG(y) || S_ISLNK(y)){
	        	int equality = filecompare(path, compfile);
	        	if(equality > 0){
					printf("Match for file %s found at path: %s. Name of file is: %s\n", compfile, path, direc->d_name);
					if(S_ISLNK(pathStat.st_mode)){
						int stated = stat(path, &pathStat2);
						if (fileStat.st_dev == pathStat2.st_dev && fileStat.st_ino == pathStat2.st_ino){
							printf("%s is a SYMLINK to target\n", path);
						}
						else{
							printf("%s is a SYMLINK to duplicate\n", path);
						}
					}
					else{
						printf("Matching duplicate found with NLINK = %lu\n", pathStat.st_nlink);
						if (fileStat.st_dev == pathStat.st_dev && fileStat.st_ino == pathStat.st_ino){
							printf("%s is a HARDLINK to target\n", path);
						}
						if ((y & S_IROTH) && (y & S_IREAD)){
	          				printf("READABLE BY OTHER\n");
						}
						else{
							printf("NOT READABLE BY OTHER\n");
						}
					}
					continue; 
				}
	        }    
		}
	}
	else if (errno = ENOTDIR){
		return;
	}
	else{
		fprintf(stderr, "Could not open directory %s: %s\n", input,strerror(errno));
		return;
	}
	int a = closedir(dir);
	if (a < 0){
		fprintf(stderr, "Unable to close directory %s: %s\n", input, strerror(errno));
	}
}

int main(int argc, char *argv[]) {
	if (argc != 3){
		printf("Please input two values, first the starting directory, and then the file you wish to find a identical copy of");
	}
	else{
		findfile(argv[1], argv[2]);
	}
	return 0;
}
