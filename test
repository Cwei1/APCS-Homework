#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <errno.h>


void listdir(const char *name, int indent)
{
    DIR *dir;
    struct dirent *entry;

    if (!(dir = opendir(name)))
        return;

    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_DIR) {
            char path[1024];
            if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
                continue;
            snprintf(path, sizeof(path), "%s/%s", name, entry->d_name);
            printf("%*s[%s]\n", indent, "", entry->d_name);
            listdir(path, indent + 2);
        } else {
            printf("%*s- %s\n", indent, "", entry->d_name);
        }
    }
    closedir(dir);
}

int main(void) {
    listdir(".", 0);
    return 0;
}
DIR* dir = opendir("mydir");
if (dir)
{
    /* Directory exists. */
    closedir(dir);
}
else if (ENOENT == errno)
{
    /* Directory does not exist. */
}
else
{
    /* opendir() failed for some other reason. */
}


#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <errno.h>

int filecompare(const char *file_one, const char *file_two){
	char *buf[2048];
	char *buf2[2048];
	int fd,fd2,bytesread, bytesread2, index, index2;
	int equal = 1;
	fd = open(file_one, O_RDONLY);
	fd2 = open(file_two, O_RDONLY);
	index = 0;
	index2=0;
	//This is done in case the buffer used is not large enough to hold the file.
	while ((bytesread = read(fd, buf + index, 2048)) > 0 && (bytesread2 = read(fd2, buf2 + index2, 2048)) > 0){
		index=index+bytesread;
		index2=index2+bytesread2;
		if(memcmp(buf, buf2, 2048)!=0){
			equal=-1;
		}
	}
	return equal;
}

void listdir(const char *input, const char *compfile){
	DIR *dir;
	struct dirent *direc;
	dir = opendir(input);
	if (dir){
		while (direc = readdir(dir)) {
			char overallpath[1024];
			if (direc->d_type == DT_DIR) {
				char path[1024];
				char pathname[1024]="";
				if (strcmp(direc->d_name, ".") == 0 || strcmp(direc->d_name, "..") == 0){
					continue;
				}
				snprintf(path, sizeof(path), "%s/%s", input, direc->d_name);
				strcat(pathname,input);
				strcat(pathname,"/");
				strcat(pathname, direc->d_name);
				strncpy(overallpath,path, sizeof(overallpath));

				listdir(path, compfile);
			} 
			else {
				if(filecompare(direc->d_name, compfile)==1){
					printf("Match for file %s found at path: %s. Name of file is: %s\n", compfile, overallpath, direc->d_name);
					break;
				}
			}
		}
		closedir(dir);
	}
	else if (ENOENT == errno){
		printf("directory unable to be found\n");   
	}
}

int main(int argc, char *argv[]) {
	listdir(argv[1], argv[2]);
	return 0;
}
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <errno.h>

size_t filesize(const char *file){
	struct stat test;
	if (stat(file,&test)<0){
		return 0;
	}
	return test.st_size;
}

int filecompare(const char *file_one, const char *file_two){

	char buf[2048]="";
	char buf2[2048]="";
	int fd,fd2,bytesread, bytesread2, index, index2;
	int equal = 0;
	fd = open(file_one, O_RDONLY);
	fd2 = open(file_two, O_RDONLY);
	index = 0;
	index2=0;
	if (filesize(file_one) != filesize(file_two)){
		equal=-1;
	}
	else{
	//This is done in case the buffer used is not large enough to hold the file.
		while ((bytesread = read(fd, buf + index, sizeof(buf))) > 0 && (bytesread2 = read(fd2, buf2 + index2, sizeof(buf2))) > 0){
			index=index+bytesread;
			index2=index2+bytesread2;
			int same=memcmp(buf, buf2, sizeof(buf));
			if(same!=0){
				equal=-1;
				printf("%i\n", equal);
			}
		}
	}
	if (equal==0){
		equal = 1;
	}
	return equal;
}

void listdir(const char *input, const char *compfile){
    DIR *dir;
    struct dirent *direc;
    if (!(dir = opendir(input))){
		return;
    }
    while ((direc = readdir(dir)) != NULL) {
    	char path[1024]="";
        if (strcmp(direc->d_name, ".") == 0 || strcmp(direc->d_name, "..") == 0){
            continue;
        }
        snprintf(path, sizeof(path), "%s/%s", input, direc->d_name);
        listdir(path, compfile);
        printf("%s\n", path);
        if(filecompare(path, compfile) > 0){
			printf("Match for file %s found at path: %s. Name of file is: %s\n", compfile, path, direc->d_name);
			break;
		}
	}
	closedir(dir);
}

int main(int argc, char *argv[]) {
	listdir(argv[1], argv[2]);
	return 0;
}
